[{"title":"名企行记","date":"2018-04-12T12:27:38.000Z","path":"2018/04/12/mingqixing/","text":"4月12日，闷热的上午。原本一直在写作业的我突然想到今天是“名企行”的日子，于是也顾不上吃午饭，火急火燎地赶到十三教。天公仿佛看到我这个狼狈的样子，再给我加上了一场“倾盆大雨”套餐。这伞也打不住的雨依旧阻挡不了我去十三教的路，还好最后没有迟到。很久没有坐过这种大巴车，让我有种回到小学时候春游的感觉。这样一想，心情也豁然开朗。大巴车开得很快，比原本预计的时间要早上很多。 rain 首先我们来到了“众元网络”，讲师把我们带到一个宽敞的教室，讲了一些未来IT职业相关的信息以及如何定位自己是走“开发”还是“网络”方向。讲师说我们来的早，不知不觉却讲得比预计的时间要长。接着，我们终于前往了我向往的“深信服”。“深信服”这个公司是我之前就早有耳闻的，因此一直想找机会了解一下。接待我们的是11届毕业的学长，他一直笑眯眯的，给人一种和蔼可亲的感觉。 shenxinfu1 首先我们来到了公司一楼的展厅。第一次来这类科技公司的展厅，我感觉到它的房屋构造，物品摆放，灯光设计这些都充满了浓厚的未来科技感。然后学长带我们参观了公司六楼的健身房、二至五楼的办公区。最后带领我们来到会议室，详细地介绍了“深信服”这个公司的历史、发展和员工福利。其中最让我印象深刻的是“亲子假期”，若公司能这样温柔地对待员工，我想员工必定会努力工作以回报公司吧。学长讲的是热情澎湃，可以看出他对这个公司是爱得深沉，把公司当成了第二个家。 shenxinfu2 shenxinfu3 这次“名企行”很快就结束了，但切实让我们这一行人紧密的接触了真实的公司内部，并学习到了优秀的企业文化和运营方式。重要的是，在这之后，我认识到在认真学习好自身专业知识的同时，根据自身兴趣爱好自学其他专业技能，为未来的工作做准备也是非常必要的。","tags":[]},{"title":"Install graylog","date":"2018-04-12T03:36:40.000Z","path":"2018/04/12/Install-graylog/","text":"","tags":[]},{"title":"xerosploit","date":"2018-04-12T02:48:51.000Z","path":"2018/04/12/xerosploit/","text":"","tags":[]},{"title":"生活艰难，也要快乐","date":"2018-04-10T00:22:50.000Z","path":"2018/04/10/shenghuojiannan/","text":"很久以前看过的电影，最近重温了三部曲，颇有感慨。剧情偏向平淡的日常，但总给人一种温暖的感觉。从以前我就羡慕他们间的情谊。运动场上一个个飞奔的身影，之后互相勾肩搭背去小卖部买饮料的身影，互相开玩笑然后嬉闹的身影。像电影里的，大家一起的日子，在回忆里闪闪发光。 lan 一直很喜欢日语里的这个词：一生悬命。当然本意只是努力而已，但按照中国汉字的理解，就更有青春里莽撞与激情的味道。我们不要变成那样的大人，于是我们要毁掉那艘船。我们一生悬命的去做一件事情。是多么美好。02年的夏天，他们还都是毛头小子，青涩，但青春的让人喜欢。那年的子俊笑得真甜，那年的二狗像是乘着风的少年。不管我抱着多么膜拜的态度前进，我都好想说，好想跟你们一起大笑着前进，在不同的轨道上，继续前进。 ergong 随着年岁的增长，父母竖起的屏障渐渐无法遮风挡雨，生活在少年们眼前显出原本残酷的模样，满身锐气往往换来满身伤痕，少年们此时才能理解父亲对上级的点头哈腰，母亲日复一日的絮絮叨叨。在理解大人的同时，少年也成长为了大人，一面舔平生活给予的创口，一面忍痛磨平自己的棱角。这本没什么不好，青春期的思想本就是过渡时期的产物，一方面是生理上的顺其自然，另一方面也源于生活上的衣食无忧。它极端，利己，像一把双头利刃，伤人终伤己。只是人这种生物偏偏爱走极端，往往刚从一处极端爬出来，又陷入另一个极端的陷阱中去。大多数人从磨圆自己这件事上尝到甜头，索性丢掉所有的少年意气，告诉自己这是最好的选择，为了自己乃至于全家人的生存忙忙碌碌，由心至口不敢说一个“不”字。他们告诉自己，社会就是这样，成为大人就是这样，忙是应该的，苦是应该的，不快乐也是应该的，反正日复一日如此，最终连“不快乐”这种情绪也会被时光磨平。只有在昔日友人提起年轻时代的事情时，才会满脸沉重，相对叹息。每一个带着不同色彩的花样少年，最后全被生活染成一片灰色。 Chu_Takuma 是，梦想什么的自你成年之后，因为现实的衬托愈显得遥不可及，但无法实现梦想并不意味着就是苦哈哈的生活，你完全可以在平淡的生活中寻到乐趣。把机车当成赛车使，每次为顾客变上几个不一样的小魔术，无论做什么都像对待自己的梦想一样全力以赴，一生悬命，因为打不准哪天就因公殉职。生命就是这样，如果你不自己去发现乐趣，那么每一天都是一模一样，只要想象将它增加到一定的倍数，相互交织，或者仅仅是简单地呈线性铺展开，就能看到自己的一生，一眼望得到头，单调乏味地让人难以忍受。自己给自己制造小惊喜，每天都用力留下印记，就能活得不一样。五子一直说的“活在当下”，并不是指安于现状，大概就是指，未来能实现梦想，今天好好过；未来不能实现梦想，今天好好过——其实大人的生活没有那么不堪，只是你自己放弃了生活。 Tauma_Chu 每个人的人生都是相似的。青春是永恒的话题，一代又一代人，电影伴着我长大。喜欢你们的青春，喜欢你们。我也即将长成所谓的”大人”，愿未来的日子带着梦想前进，不忘快乐的初心。","tags":[]},{"title":"Common WiFi attacks and how to detect them","date":"2018-01-19T03:36:57.000Z","path":"2018/01/19/Common-WiFi-attacks-and-how-to-detect-them/","text":"原版The issue with 802.11 Management framesThe 802.11 WiFi standard contains a special frame (think “packets” in classic, wired networking) type for network and connection management. For example, your computer is not actively “scanning for networks” when you hit the tray icon to see all networks in range, but it passively listens for so-called “beacon” management frames from access points broadcasting to the world that they are there and available. Another management frame is the “probe-request” (“Hi, is my home network in range?”) that your devices are sending to see if networks they connected before are in range. If such a network is in range, the relevant access points would respond with a “probe-response” frame (“Hi, yes I’m here! You can connect to me without waiting for a beacon frame.”) The problem with management frames is that they are completely unencrypted. This makes WiFi easy to use because, for example, you can see networks and their names around you without exchanging some key or password first, but it also makes WiFi networks prone to many kinds of attacks. wifi Common attacks explainedSniffing trafficVirtually all WiFi traffic can be sniffed with adapters in monitor mode. Most Linux distributions support to put certain WiFi chipsets into this special mode that will process all traffic in the air and not only that of a network you are connected to. Everyone can get WiFi adapters with such a chipset from Amazon, some for less than $20. Encrypted networks will also not really protect you. WEP encryption can be cracked in a matter of minutes and even WPA2-PSK is not secure if you know the passphrase of a network (for example, because it’s the office network and you work there, of because the local coffee shop has it written on the door) and can listen to the association process of the device. This works because the device-specific encryption between you and the access point uses a combination of the network passphrase and another key that is publicly exchanged (remember, management frames are not encrypted) during the association process. An attacker could force a new authentication process by spoofing a deauthentication frame that will disconnect your device for a moment. (more on that below) Detecting sniffersSniffing traffic is passive and cannot be detected. As a user, consider all WiFi traffic on open or closed to be public and make sure to use encryption on higher layers, like HTTPs. (Really, you should be doing this anyways, in any network.) Brute-forcing accessLike any other password, passphrases for wireless networks can be brute-forced. WEP can be cracked by analyzing recorded traffic within minutes and has been rendered useless. For WPA secured networks you’d need a standard dictionary attack that just tries a lot of passwords. Detecting brute force attacksBrute-forcing by actually authenticating to an access point is extremely slow and not even necessary. Most brute force cracking tools work against recorded (sniffed) WiFi traffic. An attacker could just quietly sit in the car in front of your office, recording traffic for some time and then crack the password at home. Like sniffing, this approach cannot be detected. The only protection is to use a strong password and to avoid WEP. JammingThe obvious way of jamming WiFi networks would be just to pump the relevant frequencies full of garbage. However, this would require fairly specialist equipment and maybe even quite some transmitting power. Surprisingly, the 802.11 standard brings a much easier way: Deauthentication and disassociation frames. Those “deauth” frames are supposed to be used in different scenarios, and the standard has more than 40 pre-defined reason codes. I selected a few to give you an idea of some legitimate use-cases: Previous authentication no longer valid Disassociated due to inactivity Disassociated because AP is unable to handle all currently associated STAs Association denied due to requesting STA not supporting all of the data rates in the BSSBasicRateSet parameter Requested from peer STA as the STA is leaving the BSS (or resetting) Because deauth frames are management frames, they are unencrypted, and anyone can spoof them even when not connected to a network. Attackers in range can send constant deauth frames that appear to come from the access point you are connected to (by just setting the “transmitter” address in the frame) and your device will listen to that instruction. There are “jammer” scripts that sniff out a list of all access points and clients, while constantly sending deauth frames to all of them. Detecting jammersA tool like nzyme (to be released - see introduction) would sniff out the deauth frames, and Graylog could alert on unusual levels of this frame subtype. Rogue access pointsLet’s talk about how your phone automatically connects to WiFi networks it thinks it knows. There are two different ways this can happens: It picks up beacon frames (“Hi, I’m network X and I’m here.”) of a network it knows and starts associating with the closest (strongest signal) access point. It sends a probe-request frame (“Hello, is an access point serving network X around?”) for a known network and an access point serving such a network responds with a probe-response frame. (“Hello, yep I’m here!”) Your phone will then connect to that access point. Here is the problem: Any device can send beacon and probe-response frames for any network. Attackers can walk around with a rogue access point that responds to any probe-request with a probe-response, or they could start sending beacons for a corporate network they are targeting. Some devices now have protections and will warn you if you they are about to connect to a network that is not encrypted but was previously encrypted. However, this does not help if an attacker knows the password or just targets an unencrypted network of your coffee shop. Your phone would blindly connect, and now you have an attacker sitting in the middle of your connection, listening to all your communications or starting attacks like DNS or ARP poisoning. An attacker could even show you a malicious captive portal (the sign-in website some WiFi networks show you before they’ll let you in) to phish or gather more information about your browser. Take a look at a miniaturized attack platform like the famous WiFi Pineapple to get an idea of how easy it is to launch these kinds of attacks. Rogue access points are notoriously hard to spot because it’s complicated to locate them physically and they usually blend into the existing access point infrastructure quite well - at least on the surface. Here are some ways to still spot them using my to-be-released tool nzyme and Graylog: Detecting rogue access pointsBSSID whitelistingLike other network devices, every WiFi access point has a MAC address that is part of every message it sends. A simple way to detect rogue access points is to keep a list of your trusted access points and their MAC addresses and to match this against the MAC addresses that you see in the air. The problem is that an attacker can easily spoof the MAC address and, by doing that, circumvent this protective measure. Non-synchronized MAC timestampsIt is important that every access point that spawns the same network has a highly synchronized internal clock. For that reason, the access points are constantly exchanging timestamps for synchronization in their beacon frames. The unit here is microseconds, and the goal is to stay synchronized within a delta of 25µs. Most rogue access points will not attempt to synchronize the timestamps properly, and you can detect that slip. Wrong channelYou could keep a list of what channels your access points are operating on and find out if a rogue access point is using a channel your infrastructure is not supposed to use. For an attacker, being detected by this method is extremely easy: Recon the site first and configure the rogue access point to only use already used channels. Another caveat here is that many access points will dynamically switch channels based on capacity anyways. Crypto dropAn attacker who does not know the password of an encrypted network she targets might start a rogue access point that spins up an open network instead. Search for networks with your name, but no (or the wrong) encryption. Signal strength anomaliesThere are many ways to spot a rogue access point by analyzing signal strength baselines and looking for anomalies. If an attacker sits on the parking lot and is spoofing one of your access points, including its MAC address (BSSID), it will suddenly have a change in the mean signal strength because he is further away from the sensor (nzyme) then the real access point.Written by Lennart Koopmann 翻译802.11管理帧存在的问题802.11 WiFi标准包含一种专门针对网络和连接管理的特殊帧类型。比如说，当你点击电脑左下方的托盘图标来查看当前范围内的所有可用网络时，你的电脑并不会主动“扫描网络”，但它会被动监听WiFi热点所广播出来的“beacon”管理帧(用来表明该热点可用)。 另一种管理帧名叫“probe-request”，它的作用是代表WiFi网络的可访问距离，你的设备会发送这种管理帧来查看之前连接过的网络当前是否在周围。如果距离内存在已访问过的网络，相应的热点将会用“probe-response”帧予以响应。 而这些管理帧存在的问题就是，它们完全没有经过任何的加密。这样做的目的是为了增加WiFi的易用性，因为你完全不需要进行任何的密钥交换或密码确认就可以查看到周围的WiFi网络以及热点名称，但这也增加了WiFi网络的攻击面。 常见攻击技术介绍嗅探流量实际上，所有的WiFi流量都是可以通过监听模式的适配器来嗅探的。大多数Linux发行版都支持WiFi芯片切换到这种特殊模式，并处理周围环境中的所有WiFi流量（不仅是你连接到的网络）。任何人都可以直接在X宝买到带有这种芯片的无线网卡，而且价格都不贵。 而且，加密网络其实也保护不了你。破解WEP加密也只是几分钟的时间而已，甚至连WPA2-PSK都是不安全的（如果你知道密码的话）。比如说，你可以窃听办公室的WiFi网络，因为你知道密码，楼下咖啡厅的WiFi也不安全，因为他们的WiFi密码一般都写在桌子上。因为你和热点之间设备特定的加密使用的是一套网络密码组合，而另一个密钥是在协商过程中通过公开交换获取的（别忘了管理帧是没有经过加密的）。攻击者将能够通过伪造去认证帧来强制发起新的认证过程，而这将导致你的设备跟热点之间出现短暂的掉线。 检测网络嗅探活动嗅探流量是一种被动行为，所以它是不能被检测到的。作为一名用户而言，你可以认为所有的WiFi流量都是开放的，所以你一定要确保使用了更高层的加密手段，例如HTTPS。 暴力破解访问对热点进行暴力破解攻击其实是非常耗时间的，而且也完全没有必要，大多数暴力破解工具都可以记录（嗅探）WiFi流量。攻击者可以安静地坐在你办公室楼下的咖啡厅，记录你办公室网络的流量，然后回家再慢慢破解你的WiFi密码。 与流量嗅探一样，这种行为同样是无法被检测到的。我唯一能给你的建议就是使用健壮的WiFi密码，并且不要使用WEP。 WiFi干扰一般来说，检测WiFi干扰行为将需要相对专业的设备才进行，而且有时甚至还需要使用到信号发射塔。但是有趣的是，802.11标准给我们提供了一种更简单的方法：去认证帧和去关联帧。这些“去认证”帧可以被用于多种不同的场景，而且该标准提供了超过40种预定义的原因代码。下面给出的是一些合法的常用示例： 之前的身份认证失效；由于不活动而导致的连接断开；由于访问点无法处理当前所有的关联STA而导致的连接断开；由于SAT不支持BSSBasicRateSet参数种的数据率而导致的拒绝连接； 因为去认证帧属于管理帧的一种，所以它们是没有经过加密的，而攻击者甚至可以在无需连接该网络的情况下伪造这种帧。信号范围内的攻击者可以向目标用户所连接的热点发送连续的去认证帧来达到干扰WiFi的目的。 检测WiFi干扰器类似nzyme（即将发布）这样的工具可以发现这种去认证帧，而且我们还可以通过查看WiFi日志来发现这种帧。 流氓热点接下来，我们讨论一下手机在自动连接至WiFi网络时会发生什么情况。一般来说，这种情况主要会发生在以下两种场景: 1.手机获取已知WiFi网络的beacon帧，然后开始与距离最近（信号最强）的热点进行连接。2.手机给已知WiFi网络发送一个probe-request帧，可提供网络服务的接入点将响应一个probe-response帧。接下来，你的手机将会跟这个响应接入点进行连接。 这里的问题就在于：任何设备都可以给任何网络发送beacon帧和probe-response帧。 攻击者可以搭建一个便携式的流氓接入点，这个接入点不仅能够响应（probe-response）任何的probe-request帧，而且它们还能够给任何的目标网络发送beacon帧。 现在的很多设备也都部署了相应的保护机制，如果你准备连接到一个之前加密但当前未加密的网络，那么设备将会给你发出警告提醒。不过，如果攻击者知道你之前所连接的WiFi密码或者说本身他攻击的就是一个开放网络的话，这种保护机制就没有任何效果了。此时，你的手机将会毫不犹豫地连接到流氓热点，而攻击者将能够获取到你所有的网络流量（类似中间人攻击）。除此之外，攻击者甚至还可以让用户的浏览器呈现恶意页面并发动网络钓鱼攻击。关于这个方面，大家可以参考一下著名的网络钓鱼攻击平台WiFi Pineapple，你很快就会知道这种攻击是有多么简单了。 其实大家都知道，流氓接入点是很难被发现的。我们不仅很难去对它们进行物理定位，而且我们也无法从众多合法热点中发现那些流氓接入点。 检测流氓接入点BSSID白名单跟其他网络设备一样，每一个WiFi接入点都有自己的MAC地址，而MAC地址也是它会发送的数据的其中一部分。一种检测流氓热点的方法就是设置一个可信接入点白名单，然后用MAC地址做标识来进行热点匹配。但是问题就在于，攻击者仍然可以轻而易举地伪造MAC地址。 非同步的MAC时间戳生成相同网络的接入点都会拥有高度同步的内部时钟。因此，接入点会不断地交换时间戳以实现同步，这个时间是毫秒级的，同步增量为25微秒。大多数流氓热点在尝试进行时间戳同步时往往会出现各种各样的错误，你可以通过检测这种错误来发现流氓热点。 错误的信道你可以设置一个列表来存储所有受信任接入点的信道，如果信道不同，则说明该接入点有问题。但是对于攻击者来说，这种保护方式也是能够轻松绕过的。 丧失加密如果攻击者不知道他的目标加密网络的密码，一般会启动一个开放的网络，启动一个相同名称的网络，但通常没有加密。 信号强度异常我们还可以通过分析WiFi信号的强度来检测流氓热点。如果攻击者伪造了一个接入点的话，你会发现其MAC地址（BBSID）和信号强度会突然发生改变。参照FREEBUF","tags":[]},{"title":"使用Fluxion钓鱼","date":"2017-12-18T00:35:41.000Z","path":"2017/12/18/fluxion/","text":"简介之前介绍了无线密码攻击的几种方式，使用Aircrack-ng的弊端是暴力破解最终可能得不到正确的秘钥。另外一种新姿势，就是针对用户进行的攻击，没有哪一个系统能扛得住社会工程学技术的入侵，Fluxion就是利用了钓鱼的方法来伪造登录界面进行入侵。(类似的工具还有WIFI-Phisher。)以下操作使用的是我寝室的TP-LINK作为实验。 功能 扫描能够接收到的WIFI信号 抓取握手包(这一步的目的是为了验证WiFi密码是否正确) 使用WEB接口 启动一个假的AP实例来模拟原本的接入点 然后会生成一个MDK3进程。如果普通用户已经连接到这个WiFi，也会输入WiFi密码 随后启动一个模拟的DNS服务器并且抓取所有的DNS请求，并且会把这些请求重新定向到一个含有恶意脚本的HOST地址 随后会弹出一个窗口提示用户输入正确的WiFi密码 用户输入的密码将和第二步抓到的握手包做比较来核实密码是否正确 这个程序是自动化运行的，并且能够很快的抓取到WiFi密码 原理我根据自己的理解，画了下图： process 操作步骤克隆1# git clone --recursive https://github.com/FluxionNetwork/fluxion.git git_clone 开始启动脚本12# cd fluxion# ./fluxion init 这时fluxion会检查它必须的组件，如果没有的话它会自动安装。 选项等待检查和安装后，会出现选项界面，以下根据个人情况选择。依次选择语言，选择网卡wlan0，选择监控所有信道 option1 之后它会将附近所有信道的AP列出 option2 等待一段时间，按下ctr+c停止扫描，选择需要的AP，我选择69。 option3 这里选择1， option4 之后选择我的wlan0网卡，选择推荐的1选项， option5 开启新的一个终端，使用airodump抓一个握手包。我抓到握手包在/root/tool/w-01.cap。之后然后选择创建ssl证书 option6 选择钓鱼的认证网页界面： option7 然后fluxion自动启动一系列服务：开启同名热点，开启钓鱼页面，阻截客户端与AP的连接： service_start 现象此时我打开手机，发现手机与热点已经断开连接并提示验证错误。此时可以看到出现了名字一模一样的热点名称。连接上钓鱼热点后，尝试任何联网行为它都将定向到192.168.254.1，我先尝试输入一次错误的密码，它会提示错误(与之前抓到的握手包进行对比校验)；当我输入正确的后，他将悄悄记录密码，然后退出Fluxion相关的所有任务，仿佛什么也没有发生过。 phone1 phone2 phone3 phone4 回到fluxion，可以看到这边已经得到密码。其实通过这种方法已经无关乎密码的复杂程度了，我这里虽然使用的是最简单的密码，但密码更复杂些，若用户没有一点防范之心它一样会乖乖到我这边来。 key_found exit 感想Fluxion这个工具不同于Airecrack和Reaver，它是通过社工的方法得到密码。总的来说这是个相当方便的一键脚本，完全傻瓜式的操作，针对没有相关常识的用户是非常快捷且有效的攻击方式。","tags":[]},{"title":"无线密码攻击","date":"2017-12-11T12:38:09.000Z","path":"2017/12/11/wirelessattack/","text":"前言当今时代，几乎每个人都离不开网络。随着网络的普及，无线网络逐渐扎根于人们的生活之中。然而，很多情况下，这些无线信号都需要身份验证后才能使用。现在我要讲的就是破解这道身份验证，连接上内网。当然，这不仅仅是可以上网了，做其他事情也更加方便。以下操作实验使用的都是自家无线路由器，使用的主要工具是Aircrack-ng。(Aircrack-ng是无线渗透测试的经典工具，它是一款基于破解无线802.11协议的WEP以及WPA-PSK加密的工具。) WEP加密的无线网络简介Wired equivalent privacy（WEP）协议是对在两台设备间无线传输的数据进行加密的方式，用来防止非法用户窃听或者侵入无线网络。不过密码分析学家已经找出WEP的好几个弱点，因此2003年被WI-FI protected access（WPA）淘汰，又在2004年由完整的IEEE 802.11i标准（WPA2）所取代。不过，现在很多路由器基本都自带这种加密方式，仍然有相当多小白可能选择了这种加密方式。WEP的破解为利用加密体制缺陷，通过收集足够的数据包，使用分析加密算法还原出密码。 步骤下面我以自家用路由器进行示例。 WEP 启动KALI终端，输入airmon-ng命令查看当前系统中的无线网路接口： airmon-ng 从输出的信息可以看出，当前系统存在一个无线网络接口。从输出结果的Interface列，可以知道当前系统的无线接口为wlan0。 开启监听模式：airmon-ng start wlan0 airmon-ng start 输出信息显示监听模式被启用，映射端口为wlan0mon。 3.使用airodum-ng wlan0mon命令定位附近所有可用的无线网络。 scan 以上输出信息显示了附近所有可用的无线网络。从输出信息可以看到很多参数： BSSID:无线的mac地址、PWR：网卡报告的信号水平（这个值越小信号越好）Beacons：无线发出的通告编号CH：AP使用的信道（从Beacons中获取）MB：无线所支持的最大速率ENC：加密方式 4.使用airodump-ng捕获指定BSSID的文件。常用命令： -c 指定选择的频道-w 指定一个文件名，用于保存捕获的数据–bssid 指定攻击的Bssid 下面将Bssid为EC:26:CA:C6:CB:1B的无线路由器作为攻击目标。1airodump-ng -c 10 -w catch --bssid EC:26:CA:C6:CB:1B wlan0mon airodump-ng 从输出信息可以看到Essid为TP-LINK的无线路由器的beacons和#Data一直在变化，表示有客户端与AP发生数据交换。从以上命令执行完毕后，会生成一个名为catch-01系列的文件，为了方便后面破解时候的调用，所有保存的文件按顺序编了号，于是就多了-01这样的编号，后面再执行会有-02，-03，以此类推。 5.打开一个新的终端窗口，执行aireplay命令。使用aireplay发送一些流量给无线路由器，以至于能够捕获到数据。其中，-b后接AP的mac，-h接我们自己网卡wlan0的mac地址 aireplay 输出信息就是使用ARP Requests的方式来读取ARP请求报文的过程，此时回到airodump-ng界面查看，可以看到TP-LNK的Frames栏的数字在飞速地增加，在抓取的无线数据报文达到一定数量后，就可以开始破解，若不能成功就等待数据报文继续抓取，然后多尝试几次。 6.使用Aircrack破解密码。再新建一个终端，在新终端执行aircrack-ng catch-02.cap成功得到密码。其中第一次我抓了1W+ 的DATA没有出密码，第二次等得稍微久点，抓了2W+DATA出了密码其中捕获文件用了大概半小时，破解密码仅仅用了四秒时间！ wep_catch 获得KEY found_wep_key WPA、WPA2加密的网络简介WPA全名为Wi-Fi Proteted Access，有WPA和WPA2两个标准。它是一种保护无线电脑网络安全的协议。对于启用WPA/WPA2加密的无线网络，其攻击和破解步骤及攻击时完全一样的。当使用aireplay-ng进行攻击后，同样获取到WPA握手数据包及提示；在破解时需要提供一个密码字典。 步骤这里我仍然以我家的路由器为例： WPA 查看无线网络接口 airmon-ng 启用无线网络接口监听 airmon-ng start 获取相关AP的信息，airodump-ng wlan0 scan 捕获数据包，执行 1airodump-ng -c 4 -w wpa --bssid EC:26:CA:C6:CB:1B wlan0mon 常用命令： -c 指定选择的频道-w 指定一个文件名，用于保存捕获的数据–bssid 指定攻击的Bssid airodump-ng 5.新建一个终端（之前打开的终端不要关闭！），对无线路由器进行Deauth攻击（取消验证攻击，迫使已经连接的客户端断开；当客户端自动连接的时候，即可抓取握手包）：1aireplay -0 3 –a EC:26:CA:C6:C:1B –c EC:9B:F3:E0:27:8F wlan0mon -0 ：指定为取消验证攻击 ，3 为攻击次数为3-a ：指定AP的mac地址-c ：指定连接AP的客户端的mac地址 aireplay 执行完后可以看到airodump终端的右上角抓到了握手包: handshake 抓到握手包后，使用aircrack-ng进行暴力破解。执行命令：aircrack-ng -w pass.txt wpa-01.cap，接下来就是无尽的跑字典过程了。 获得KEY dic_passwd 这里我使用的是8位纯数字字典，其大小约858M。Airacrack跑字典的速度取决于你的电脑的配置，找出密码的速度则取决于字典的质量还有运气了。 WPS(Wi-Fi Protect Setup)简介WPS是由WIFI联盟推出的全新WIFI安全防护设定标准。该标准主要是为了解决无线网络加密认证过于繁杂的弊病。因为很多用户觉得设置步骤太麻烦，不做任何安全设定。所以很多人使用wps设置无线设备，可以通过个人识别码(PIN)或按钮（PBC）取代输入一个很长的密码。路由器开启wps功能后，会随机生成一个8位的pin码，通过暴力枚举pin码，达到破解的目的。pin码是由8位纯数字组成的识别码，pin码破解是分三部分进行的，规律是这样的：pin码分为三部分，如图： pin_part 前4位为第一部分，第5-7位为第二部分，最后1位为第三部分。第一部分的验证跟第二部分没关联，最后1位是根据第二部分计算得出的校验码。破解一开始是先单独对第一部分进行pin码匹配，也就是说先破解前4位pin码。前4位是0000-9999总共10000个组合。当前4位pin码确定后再对第二部分进行pin码匹配，也就是再对5-7位进行破解，5-7位是000-999总共1000个组合。当前7位都确定后，最后1位也会自动得出，至此即可得出密码。根据pin码破解的原理，可以看到只需要枚举11000种情况就会必然破解出pin码，从而通过pin码得到WIFI密码。 步骤由于我家的路由器没有这个功能，找到我姑姑家的老式TP-LINK： tp-link 打开终端执行airmon-ng检测网卡 airmon-ng 开启监听模式 airmon-ng start 扫描开启WPS的设备，LCK为NO的都可以爆破试试 wps_on 使用Reaver爆破reaver 命令： reaver -i mon0 -b mac -S -vreaver命令参数: -i 监听后接口名称-b 目标mac地址-S 使用最小的DH key（可以提高爆破速度）-vv 显示更多的非严重警告-d 即delay每穷举一次的闲置时间 预设为1秒-c 指定频道可以方便找到信号，如-c 1 指定1频道 -N 不发送NACK信息（如果一直pin不动，可以尝试这个参数） 终端执行：1reaver -i wlan0mon 20:DC:E6:D1:DE:E4 -N -vv -c 8 获得KEY reaver 当Reaver暴力穷举出正确的pin码时，不管无线路由器的密码有多复杂，它都是手到擒来了。 WIFI万能钥匙简介Wifi万能钥匙的使用十分简单，而且据我的个人经历，小区范围内私人使用的无线网络基本可以使用WIFI万能钥匙解开。要得到WIFI的密码，，只需要三步即可到位。 步骤 打开WIFI万能钥匙，可以看到有钥匙图标的热点可以直接解开： WIFI_master 解开密码，连接上WIFI后，打开RE管理器（安卓手机下的文件管理器），进入如下路径（需要root权限）：/data/misc/ RE 打开wpa_supplicant.conf可以看到刚刚连接的WIFI的密码： cat_passwd 总结以上，是我平时取得WIFI密码的常用方法。基本思路是：先看万能钥匙能否解开，这个方式最简便然后再看加密方式，WEP加密参考0x02，若是WPA加密先看AP是否开启WPS,参考0x04，否则只能跑字典，参考0x03。","tags":[]},{"title":"VMware的三种网络模式","date":"2017-11-12T09:59:46.000Z","path":"2017/11/12/vmware-3-mode/","text":"前言新来的学弟学妹们没有相关的计算机网络概念，在VMware安装好后，遇到没有网络的情况经常不知道怎么办。一般虚拟机安装好之后，会自动添加两张网卡(VMnet1和VMnet8),VMnet1是用户通过Host-only的网络连接，VMnet8是通过NAT方式的网络连接 Bridged 桥接模式特点虚拟机和主机是处于同等地位的机器，所以网络功能也无异于主机。并且和主机处于同一网段。 原理桥接模式，使用的是VMnet0虚拟网卡。vmnet0实际上就是一个虚拟的网桥(2层交换机)，这个网桥有若干个接口，一个端口用于连接你的Host主机，其余端口可以用于连接虚拟机，他们的位置是对等的，谁也不是谁的网关。所以桥接模式下，虚拟机和Host主机是同等地位的主机。 vmnet0 示例图主机A上的两个虚拟机1和虚拟机2，和主机A、B同处于一个网段，能够相互通信 vmnet0_1 这个模式在一般局域网常用到，但是在寝室园区使用桥接的话，由于需要认证才能上网，所以不能用这种方式 Host-only模式特点只能和主机相互通信，不能上网，也不能访问其他主机，用于建立与外部隔离的网络环境 原理Host-only模式使用的是VMnet1网卡。这种方式下，虚拟机连接到VMnet1上，但系统并不为其提供任何路由服务，因此虚拟机只能和宿主机进行通信，而不能连接到真正的网络上。 示例图虚拟机1和2之间可以相互通信，主机A能和虚拟机1和2通信，虚拟机1和2不能和主机通信(需要设置)，虚拟机不能和B主机以及外网通信 vmnet1 这个模式不常用，因为它连接不到网络，但是它是nat的基础 NAT模式特点 主机ping不通虚拟机(包括宿主) 同一宿主的虚拟机可以相互ping通 宿主能够联网，虚拟机也能联网(其他主机)。宿主没有联网，虚拟机也不能联网 虚拟机能够ping通主机,其他主机不能访问虚拟机 原理网络地址转换类似于家庭路由器的方式工作。使用NAT模式，就是让虚拟系统借助NAT（网路地址转换）功能，通过宿主机器所在的网络来访问公网。其实就是虚拟机的网卡连接到宿主的VMnet8虚拟机交换机上，VMnet8充当了路由器的作用，负责将虚拟机转发到VMnet8的包进行地址转换之后发送到实际的网络中，再降实际网络上返回的包进行地址转换后通过VMnet8发送给虚拟机。其实相比Host-only模式只不过增加一层路由功能。 示例图主机A和虚拟机1和2能相互通信，虚拟机1和2能访问主机B和外网，主机B不能访问虚拟机1和2，虚拟机1和2能相互通信 vmnet8 vmnet8_1 一般在学校的环境下（连接因特网需要锐捷认证），这种模式使得虚拟机能够快捷地连接到因特网。","tags":[]},{"title":"Burp Suite模块之Lntruder暴力破解网页登陆","date":"2017-10-21T04:36:18.000Z","path":"2017/10/21/burp/","text":"发现本学期升级的校园网，网页登陆验证很是简陋，不需要验证码，明文传输 HUNAU Auth_Info 而我们知道，新的网络，密码都是由身份证后6位组成，可以使用之前Crunch生成的对应字典，这里以我自己的账号作为测试。 配置环境 BurpSet FirefoxSet 抓包在跳转的登陆界面 http://10.100.0.12:9090/zportal/loginForWeb?wlanuserip=37c61a32243725e8412223107e8670d4&amp;wlanacname=00aab905808bf54238202dd3074e226b&amp;ssid=99f34848c4e3872f&amp;nasip=3a55a6e233ce66a3e3c9d19c2572b2ea&amp;snmpagentip=&amp;mac=e2483bb22f79a96b0b178e83ca255d91&amp;t=wireless-v2&amp;url=63651eaa103df95e80e6576b018a1055&amp;apmac=&amp;nasid=00aab905808bf54238202dd3074e226b&amp;vid=6ff7431ed4e21b22&amp;port=e2bcde16e9a8b04a&amp;nasportid=a25b45948c15af40d095454b31cfa807fcfd7ec39a63f462933adb33ce566a2a中抓取到： CatchInfo 使用选中一下黄色标记的字符，右键Send to lntruder： Burp_case1 可以看到Lntruder对应的选项卡变为高亮，点击Lntruder选项卡: Burp_case2 点击进入Positions选项卡，看到下方有15个payload，我们不需要这些，点击Clear，然后下方编程0payload： Burp_case3 翻下去找到我们需要的变量，选中“12121”点击右侧Add，可以看到下方显示1payload： Burp_case4 点击payload选项卡，payload type我选择跑字典： Burp_case5 接着option选项卡里，修改线程为10,可以根据实际网络情况加大。有些网站可能会有保护措施，重复登录多次后会封IP，但明显这个认证界面没有这个保护 Burp_case6 最后点击最上方的选项卡lntruder的start attck： Burp_case7 接下来就是跑字典的过程了，我自定义的身份证后6位密码有310000组: Burp_case8 睡一个午睡后，点击length排序（登陆密码错误时和登陆成功后的response包不同，length必然有差别）注意到response里结果为成功，找到密码为“297410”： Burp_Success 当然，”Intruder”只是Burpsuite其中的一个模块，它的功能和用处远远不止这些。以上测试是基于我的个人账号，切勿用于不当用途。","tags":[]},{"title":"密码生成工具Crunch的使用","date":"2017-10-07T05:05:17.000Z","path":"2017/10/07/crunch/","text":"很多时候网络上下载的、系统或软件自带的字典效果不尽如人意，这个时候我们可能就需要根据自己的需求生成一个按照我们已经知道的信息来组合的字典。 介绍Crunch是一种创建密码字典工具，该字典常用来暴力破解。使用Crunch工具生成的密码可以发送到终端、文件或者另一个程序。Crunch默认安装在kali环境中，Crunch可以按照指定的规则生成密码字典，生成的字典字符序列可以输出到屏幕、文件或重定向到另一个程序中，Crunch可以参数可能的组合和排列，其最新版本为3.6。并具备如下特征： Crunch可以以组合和排列的方式生成字典 它可以通过行数或文件大小中止输出 支持恢复 支持数字和符号模式 分别支持大小写字符模式 在生成多个文件时添加状态报告 新的-l选项支持@，%^ 新的-d选项可以限制重复的字符，可以通过man文件查看详细信息 现在支持unicode Crunch其实最厉害的是知道密码的一部分细节后，可以针对性的生成字典，这在渗透中就特别有用。 使用现在的KALI中一般自带Crunch。在终端下输入Crunch，执行以上命令后，将输出如下所示的信息： Crunch_info 输出的信息显示了Crunch命令版本及语法格式：1$ Crunch &lt;min&gt; &lt;max&gt; [options] 常用选项(1) -b 数字[类型] 指定输出文件的大小，仅仅使用“-o”选项时生效;例如60mb，例如格式： “Crunch 4 5 -b 20mib -o START”会生成4个文件：aaaa-gvfed.txt，gvfee-ombqy.txt，ombqz-wcydt.txt，wcydu-zzzzz.txt，其中每一个文件的开始和最后字符串将作为文件的文件命名;类型有效值为KB、MB、GB、KIB，MIB，和GIB。前三种类型是基于1000，而最后三种类型是基于1024，注意数字与类型之间没有空格。例如“500mb”正确，而“500 MB”则不正确，执行命令后如图所示。aaaa-gvfed.txt，gvfee-ombqy.txt，ombqz-wcydt.txt大小将是20M，以1024为基数，也即20480kb，一般以mib为参数。 Crunch_option1 (2) -c 数字 指定写入输出文件的行数，也即包含密码的个数（行数），例如使用字符规则mixalpha-numeric-all-space，生成最小和最大字符串为1的且每一个文件保存60个字符串的密码字典： Crunch_option2 Crunch_option22 (3) -d 数字符号，限制出现相同元素的个数(至少出现元素个数)，“-d 2@”限制小写字母输出像aab和aac，aaa不会产生，因为这是连续3个字母，格式是数字+符号，数字是连续字母出现的次数，符号是限制字符串的字符，例如@,%^(“@”代表小写字母，“,”代表大写字符，“%”代表数字，“^”代表特殊字符)(4) -e 字符串，定义停止生成密码，比如-e 222222：到222222停止生成密码: Crunch_option4 (5) -f /path/to/charset.lst charset-name，从charset.lst指定字符集，也即调用密码库文件，比如kali中的charset.lst 在/usr/share/Crunch/charset.lst，则参数为“-f /usr/share/Crunch/charset.lst”(6) -o wordlist.txt，指定输出文件的名称，例如wordlist.txt(7) -p 字符串 或者-p 单词1 单词2 …以排列组合的方式来生成字典。 Crunch_option7 (8) -q filename.txt，读取filename.txt(9) -s 指定一个开始的字符。(10) -t @,%^，指定模式，@,%^分别代表意义如下： @ 插入小写字母 , 插入大写字母 % 插入数字 ^ 插入特殊符号 (11) z gzip, bzip2, lzma, and 7z，从-o选项压缩输出结果，支持gzip, bzip2, lzma, and 7z格式，gzip是最快压缩率最低，bzip2是稍微慢于gzip，但比其压缩率搞，7z最慢，但压缩率最高。 实例生成单词的所有组合1$ Crunch 9 9 -p wang 1997 0101 制作8位密码字典1$ Crunch 8 8 charset.lst numeric -o num8.dic 制作139开头的手机字典可以每次生成文件大小为20M，自动生成文件：1$ Crunch 11 11 +0123456789 -t 139%%%%%%%% -b 20mib -o START Crunch_case1 另外，KAILI还自带了一些字典在/usr/share/wordlists/文件夹下，例如rockyou.txt.gz字典，将字典解压后其实就是一个rockyou.txt文件，里边包含了WPA的常用密码. 搭配工具校园网登陆认证默认使用身份证后6位作为密码 HUNAU 可以使用Crunch方便地生成需要的字典 IDpasswd 考虑到还有以X结尾的号码: IDpasswdX 然后可以使用Burpsuite…Crunch只是一个生成字典的工具，理论上支持搭配所有暴力破解的工具，比如跑抓到的WIFI握手包，压缩包密码等，以后它将是我如影随形的伙伴了！Crunch Me!","tags":[]},{"title":"被玩坏的校园网","date":"2017-09-27T09:21:42.000Z","path":"2017/09/27/wang/","text":"校园网的升级随着时代的发展，学校也紧跟潮流在今年升(zhang)级(jia)了校园网。之前校园网是纯有线锐捷客户端认证，现在校园网将电信联通合并，加上无线网络覆盖全校，实在是皆大欢喜，可喜可贺，可喜可贺啊！ 有线认证方式使用了多年的有线网络，通过锐捷客户端认证，原来￥80一学期还不限速的网络一去不复返咯。 Ruijie 无线认证方式第一种方式是连接“HUNAU”，连接后无网络访问权限，通过网页认证，使用未购买套餐的账号登陆可以直接连接上并可以上学校内网。 Wireless1 HUNAU 第二种方式是连接“HUNAU-Auto”，热点自带的认证登陆，使用未购买套餐的账号连接也可以上内网 Wireless2 当然，身为穷逼的我，肯定是续费了￥80一学期的纯有线网络(如今限速)，看着高带宽和无线网络的价格实在消瘦不起。 已知的方式目前我知道的绕过学校认证和限速的方法有以下几种： 1.DNS隧道2.内网VPN3.我瞎折腾的方法 这里记录一下三种方式的部署和使用，以下纯属实验，只是为了更深入地理解计算机网络相关知识啦~！仅供参考，切勿用于不当目的！ DNS隧道简介在连接到某个需要 Web 认证的热点之前，我们已经获得了一个内网 IP，此时，如果我们访问某个 HTTP 网站，网关会对这个 HTTP 响应报文劫持并篡改，302 重定向给我们一个 Web 认证界面（所以点 HTTPS 的网站是不可能跳转到 web 认证页面的）。详细原理我们看到了，网关（或者说交换机）都默认放行 DHCP 和 DNS 报文，也就是 UDP53 与 UDP 67。有些网关甚至不会报文进行检查，这也就意味着任何形式的数据包都可以顺畅通过。既然如此，我们就可以在公网搞一台服务器，然后借此来免费上网，顺便还能防止网络审计(其实只是把钱花在服务器上了)。我们这次免费上网的主要突破点就是 UDP 53，当然了，据一位朋友实践，UDP 67、68也可以绕过 Web 认证。 环境监测在部署之前有必要进行一下环境监测，以免造成因为环境不允许而做的一大堆无用功。打开 cmd（GNU/Linux的终端），输入如下内容1nslookup www.baidu.com 或者使用脚本测试下,这里参照了博主”土豆不好吃”的文章。click me若测试环境允许，可以进行下一步的搭建服务 服务搭建这里也有很详尽的教程，参照CSDN博主”玖洲维城网络科技”的文章。click me按照文章所述在服务器安装好Softether，在我的电脑安装上Openvpn并连接就能直接畅游网络了。 使用心得以上，可以绕过认证直接连接到因特网，但由于我使用的是国内的学生服务器，所以受到带宽的限制… 下载地址Softethrer Server64位版本: 链接: https://pan.baidu.com/s/1vNvIJscFLQj42XZ_Rnk6Rg 密码: xgjcSoftethrer Server树莓派ARM32位版本: 链接:https://pan.baidu.com/s/1c2GWopy 密码:fv4bSoftether的WINDOWS管理端：链接: https://pan.baidu.com/s/1bUrtKi 密码: y8s1Softether的WINDOWS客户端：链接: https://pan.baidu.com/s/1c24fbLA 密码: fddrOPVEN_GUI客户端：链接:https://pan.baidu.com/s/1nvkPPfN 密码:fc55 内网VPN简介前面说到，最新的校园网套餐实行了分档次的套餐，不同档次不同速率，这里的不同速率是指访问外网的速率，内网的访问速率是没有限制的。这时，在已经认证成功的前提下，获得了网络访问权限，但此时访问外网的速率是受限制的。那么我在学校内网有一台能够上网的机器，利用点对点连接，把它当做跳板不就行了？ Vpn_inschool 服务搭建恰好我在实验室有这样的资源，一台IP地址为”10.x.x.x”的服务器(其实买个树莓派插在实验室也一样)。按照上述服务搭建的步骤在这台服务器上安装Softether，然后在我的电脑上使用Openvpn的配置文件直接连接,搞定！ 使用心得以上，在登陆认证获得内网访问权限后，通过Openvpn连接到我的内网服务器，没有受到任何限速！ 瞎折腾简介这种方式完全是我瞎折腾出来的，原理猜测是无线认证和有线认证是分开的两台服务器，但两者是有同步消息的。在我的电脑，两个客户端(无线认证和有线认证)同时认证卡住两台服务器同步消息的时间，使两台服务器消息矛盾，绕开了他们的限制。 操作步骤 将有线网卡禁用，通过无线认证第一种方式连接HUNAU，打开浏览器自动跳出登陆网页，这是无线认证服务器的认证端网页，先保留着，URL如下，其中有mac、userip等参数：http://10.100.0.12:9090/zportal/loginForWeb?wlanuserip=37c61a32243725e8412223107e8670d4&amp;wlanacname=00aab905808bf54238202dd3074e226b&amp;ssid=99f34848c4e3872f&amp;nasip=3a55a6e233ce66a3e3c9d19c2572b2ea&amp;snmpagentip=&amp;mac=e2483bb22f79a96b0b178e83ca255d91&amp;t=wireless-v2&amp;url=1cd4c9d683b191233d7be2539eb794196a2a58b150f012b910b74a2fde544bac1f10cdd1bb45c9aeec992c5a1746e8ea6ea1b480e0d713af4a1725a95600c0b3&amp;apmac=&amp;nasid=00aab905808bf54238202dd3074e226b&amp;vid=6ff7431ed4e21b22&amp;port=e2bcde16e9a8b04a&amp;nasportid=a25b45948c15af40d095454b31cfa807fcfd7ec39a63f462933adb33ce566a2a 将无线网卡禁用，打开有线网卡，打开有线认证方式的锐捷客户端。 回到浏览器的网页上，打开记住密码和自动登陆： Login_page 最重要的一步！锐捷认证客户端点连接，网页认证点登陆，手要快！确保几乎在同时认证。 然后可以看到两者同时登陆上。若如平时正常登陆有线锐捷客户端，然后再登陆这个网页认证端，其中必有一个被挤下线，也不能访问因特网。 Login_success Auth_success 使用心得网速测试是20M带宽，这种方式好像同时绕过了限速，看到室友2M、4M蛋疼的小水管，躲在角落偷偷笑。使用发现，通过这种方式连接的网络十来分钟后会断掉，之后不能解析地址，不能ping通8.8.8.8，QQ不能发送和接收消息，但是奇怪的是正在观看的直播不会断。有待进一步探究…","tags":[]},{"title":"这是我在Hexo的第一篇文章！Hexo+Gitpage搭建日记","date":"2017-09-07T05:05:17.000Z","path":"2017/09/07/hello-world-1/","text":"部署操作还是挺简单的，具体参照: click here重复的轮子就不造了,感谢原作者”Yu丶”的详尽教程 踩过的坑这其中必须得提一下部署过程中踩过的坑，纠结了很久。。前面的搭建环境都没有问题，到最后上传部署到gitpage时，运行hexo d没有任何提示。就像这样: error 就是这个东西！deploy选项下面，在配置项的前面必须有两个空格，冒号后面必须有一个空格！ space 所以说，格式非常重要，必须一丝不苟地对待…还有注意本地部署三部曲和部署三部曲：123$ hexo clean$ hexo g$ hexo s --debug(hexo d) 主题在Github上搜索了相关的主题，发现Indigo这个样式挺合我意的。果断使用它了！click here感谢”yscoder”大神的无私奉献，让我这样的小白也能用上漂亮的主题！根据以上文档进行自定义修改： 站点配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Sevge&apos;s Blogsubtitle: description: My Blogauthor: Sevgelanguage: zh-CNtimezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://sevge.github.io/about/root: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 7pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: indigofeed: type: atom path: atom.xml limit: 0jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:Sevge/sevge.github.io.git branch: master 主题配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163# hexo-theme-indigo# https://github.com/yscoder/hexo-theme-indigo# 添加新菜单项遵循以下规则# menu:# link: fontawesome图标，省略前缀，本主题前缀为 icon-，必须# text: About 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写# url: /about 链接，绝对或相对路径，必须。# target: _blank 是否跳出，省略则在当前页面打开menu: home: text: 主页 url: / archives: text: 归档 url: /archives# tags:# text: 标签# url: /tags th-list: text: 分类 url: /categories github: url: https://github.com/sevge target: _blank link: text: 关于 url: /about# 你的头像urlavatar: /img/avatar.jpg# avatar linkavatar_link: /# 头像背景图brand: /img/brand.jpg# faviconfavicon: /favicon.ico# emailemail: sevge6582@gmail.com# 设置 Android L Chrome 浏览器状态栏颜色color: &apos;#3F51B5&apos;# 页面标题tags_title: Tagsarchives_title: Archivescategories_title: Categories# 文章截断excerpt_render: falseexcerpt_length: 200excerpt_link: 阅读全文...mathjax: falsearchive_yearly: true# 是否显示文章最后更新时间show_last_updated: false# 是否开启分享share: true# 是否开启打赏，关闭 reward: falsereward: false# title: 谢谢大爷~# wechat: /img/wechat.jpg #微信，关闭设为 false# alipay: /img/alipay.jpg #支付宝，关闭设为 false# 是否开启搜索search: true# 是否大屏幕下文章页隐藏导航hideMenu: true# 是否开启toc# toc: falsetoc: list_number: true # 是否显示数字排序# 文章页留言内容，hexo中所有变量及辅助函数等均可调用，具体请查阅 hexo.iopostMessage: #这里可以写作者留言，标签和 hexo 中所有变量及辅助函数等均可调用，示例：&lt;a href=&quot;&lt;%- url_for(page.path).replace(/index\\.html$/, &apos;&apos;) %&gt;&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;%- page.permalink.replace(/index\\.html$/, &apos;&apos;) %&gt;&lt;/a&gt;# 站长统计，如要开启，输入CNZZ站点id，如 cnzz: 1255152447cnzz: false# 百度统计，如要开启，改为你的 keybaidu_tongji: false# 腾讯分析，如要开启，输入站点idtajs: false# googlegoogle_analytics: falsegoogle_site_verification: false# lessless: compress: true paths: - source/css/style.less# 以下评论插件开启一个即可# 是否开启 disqusdisqus_shortname: false# 是否开启友言评论, 填写友言用户iduyan_uid: false# 是否使用 gitment，https://github.com/imsun/gitmentgitment: false# gitment:# owner:# repo:# client_id:# client_secret:# Valine Comment system. https://valine.js.orgvaline: enable: false # 如果你想使用valine，请将值设置为 true appId: # your leancloud appId appKey: # your leancloud appKey notify: false # Mail notify verify: false # Verify code avatar: mm # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide placeholder: Just go go # Comment Box placeholder guest_info: nick,mail,link # Comment header info pageSize: 10 # comment list page size# 是否开启Hyper Comments，填写id则启用，false则禁用。http://hypercomments.com# Hyper Comments support. Write your id here, or false to disablehyper_id: false# 规范网址# 让搜索引擎重定向你的不同域名、不同子域、同域不同目录的站点到你期望的路径# https://support.google.com/webmasters/answer/139066# 假设配置为 canonical: http://imys.net，那么从搜索引擎中 www.imys.net 进入会重定向到 imys.netcanonical: false# 版权起始年份since_year: 2017# 用户页面中作者相关的描述性文字，如不需要设为 falseabout: 只是一只奔跑的柯基啦(&gt; ~ &lt;)# “不蒜子”访问量统计，详见 http://ibruce.info/2015/04/04/busuanzi/visit_counter: false# site_uv: 站点总访客数：# site_pv: 站点总访问量：# 动态定义titletitle_change: normal: (つェ⊂)咦!又好了! leave: 死鬼去哪里了！# 设置为 true 发布后将使用 unpkg cdn 最新的主题样式# 如果想让你的自定义样式生效，把此项设为 falsecdn: false# 设置为 true 将使用 lightbox render 图片lightbox: true# icp备案号 ICP_license: 京ICP备1234556号-1ICP_license: false 主题配色由于个人喜欢低调的灰色，参照Material Design Color Palette Generator将站点默认的靛蓝修改成灰色：编辑theme/indigo/source/css/_partial/variable.less,更改对应的颜色变量1234567891011@darkPrimaryColor: #616161;@primaryColor: #9e9e9e;@lightPrimaryColor: #f5f5f5;@textPrimaryColor: #212121;@accentColor: #536dfe;@primaryTextColor: #212121;@secondaryTextColor: #757575;@dividerColor: #bdbdbd;@borderColor: #dadada;@backColor: #f6f6f6;@codeBg: #f5f5f5; 总结不管怎么说，作为菜鸟的我也开始了写博客的旅程。今后还请多多指教了！","tags":[]}]